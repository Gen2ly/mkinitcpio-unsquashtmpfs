#!/usr/bin/ash
# attribute: Patryk Jaworski's <regalis@regalis.com.pl> mkinitcpio-squashfs

mount_handler_unsqaushtmpfs () {
	#mkdir /image;
	#local tmp device path imagepath imagedev_mountpoint
    #local device path imagepath imagedev_mountpoint
    #local device path /dev/sr0 /rootdir.squashfs

	#imagepath="/image/root.squashfs"


	#imagedev_mountpoint="/image_source"

#	case "$device" in
#		/dev/* | LABEL=* | UUID=* )
#            if [ ! -e "$device" ]; then
#                device=$(blkid -lt "$device" -o device)
#            fi
#            if [ ! "$device" ]; then
#                err "Device non-valid."
#            fi
#            launch_interactive_shell

    local device device_mp squashrootpath unsquashtmp_mp

    # Device existence test
    device=${squashimgpath%%:*} 
    if [ ! -e "$device" ]; then
        _device="$device"
        device=$(blkid -lt "$device" -o device)
    fi
    if [ ! "$device" ]; then
        err  "Device not detected: "$_device"."
        echo "device= define correctly to continue."
        launch_interactive_shell
        msg  "Trying to continue..."
    fi

    # Device mount
    device_mp=/mnt/${device##*/}
    mkdir -p "$device_mp"
    if ! mount "$device" "$device_mp"; then
        err  "Mount error"
        launch_interactive_shell
        msg  "Trying to continue..."
    fi

    # SquashFS image existence test
    squashrootpath="${squashimgpath##*:}"
    if [ ! -f "$squashrootpath" ]; then
        err  "SquashFS image not found: "$squashrootpath"."
        echo "path= define correctly to continue."
        launch_interactive_shell
        msg  "Trying to continue..."
    fi

    # Tmpfs create
    if [ ! "$squashtmpsize" ]; then
        err  "squashtmpsize= not specified."
        echo "Specify squashtmpsize= in bytes"
        launch_interactive_shell
        msg  "Trying to continue..."
    fi
    if ! mount -t tmpfs tmpfs /mnt/test -o rw,size="$squashtmpsize",relatime
    then
        err  "Tmpfs creation failed."
        echo "Does your system have enough memory?"
        launch_interactive_shell
        msg  "Trying to continue..."
    fi   

    # SquashFS image decompress
    unsquashtmp_mp=/mnt/unsquashtmp
    mkdir -p "$unsquashtmp_mp"
    if ! unsquashfs -d "$unsquashtmp_mp" -f "$squashrootpath"; then
        err  "SquashFS decompression failed."
        echo "Does squashtmpsize= specify enough memory?"
        launch_interactive_shell
        msg  "Trying to continue..."
    fi

#			echo "Detected local SquashFS source..."
#			device=${squashfs%%:*}
#			path=${squashfs##*:}
#			if [[ "${device}" = "${path}" ]]; then
#				err "Syntax error while parsing 'squashfs' argument..."
#				echo "Unable to find image path, did you forget about \":\"?"
#				echo "If you inted to use auto image search, type (in your kernel cmdline):"
#				echo "   squashfs=DEVICE:AUTO"
#				echo "example:"
#				echo "   squashfs=/dev/sda1:AUTO"
#				echo
#				echo "You are being dropped to a recovery shell"
#				echo " Try to place image (or link to it) in ${imagepath}"
#				echo " or just mount SquashFS image at ${1}"
#				echo 
#				echo "Anyway, good luck..."
#				launch_interactive_shell
#				msg "Trying to continue..."
#			else
#				mkdir "${imagedev_mountpoint}"
#				echo "Trying to mount SquashFS image source (${device})"
#				mount "${device}" "${imagedev_mountpoint}"


#				if [[ ! $? -eq 0 ]]; then
#					err "Unable to mount image source: ${device}"
#					echo "You are being dropped to a recovery shell"
#					echo " Try to mount your SquashFS device in ${imagedev_mountpoint}"
#					launch_interactive_shell
#					msg "Trying to continue..."
#				fi
#
#				grep "${imagedev_mountpoint}" /proc/mounts > /dev/null 2>&1
#
#				if [[ ! $? -eq 0 ]]; then
#					err "Image's root device still not mounted"
#					echo "You are on your own now..."
#					launch_interactive_shell
#					msg "Trying to continue (this will most likely fail)..."
#				fi
#
#				if [[ "${path}" = "AUTO" -o "${path}" = "auto" ]]; then
#					echo "Searching for SquashFS images..."
#					path="$(find "${imagedev_mountpoint}" -type f -and \( -name "#*.sfs" -or -name "*.squashfs" \) -print -quit)"
#					if [[ -z "${path}" ]]; then
#						err "Unable to find any SquashFS image in ${imagedev_mountpoint}"
#						echo "Umounting ${device}"
#						umount "${device}"
#						echo
#						echo "You are on your own now, try to mount root in ${1}"
#						echo
#						return 1;
#					fi
#					echo "Found SquashFS image in ${path}"
#				else
#					path="${imagedev_mountpoint}/${path}"


#				fi
#
#				if [[ ! -r "${path}" ]]; then
#					err "SquashFS image (${path}) is not fund (or it is not readable)"
#					echo "You are being dropped to a recovery shell"
#					echo " Try to move or link image to ${path}"
#					launch_interactive_shell
#					msg "Trying to continue..."
#				fi
#
#				if [[ "${squashfs_copy}" = "true" -o "${squashfs_copy}" = "1" ]]; then
#					squashfs_prepare_tmpfs
#					echo "Copying SquashFS image to RAM, this can take a while..."
#					pv -pterb "${path}" > "${imagepath}"
#					umount "${imagedev_mountpoint}"
#				else
#					imagepath="${path}"
#				fi;
				
#			fi
#		;;
#	esac
#	
#	grep "${1}" /proc/mounts > /dev/null 2>&1
#	if [[ $? -eq 0 ]]; then
#		echo "Root already mounted, skipping..."
#	else
#		mount -t squashfs "${imagepath}" "$1" -o loop
#		if [[ ! $? -eq 0 ]]; then
#			err "Unable to mount SquashFS image..."
#			launch_interactive_shell
#		fi
#	fi

}



run_hook() {
	        #if [[ -z ${squashfs} ]]; then
		    #    return 0;
	        #fi
	        #mount_handler=mount_handler_device_squashimg;
    
    mount_handler=mount_handler_unsqaushtmpfs

}

# vim: ai ts=4 sw=4 ft=sh: